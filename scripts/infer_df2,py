import os
import torch
import cv2
from torchvision.models.detection import maskrcnn_resnet50_fpn
from torchvision.transforms import functional as F

from train_df2_maskrcnn import build_model, DF2_CLASSES

CONFIG_CKPT = r"./checkpoints_df2/final.pth"
IMAGE = r"path\to\your_image.jpg"
OUT = r"out_vis.jpg"
SCORE_THR = 0.35

def main():
    model = build_model(num_classes=len(DF2_CLASSES) + 1, pretrained=False)
    state = torch.load(CONFIG_CKPT, map_location="cpu")
    model.load_state_dict(state["model"])
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device).eval()

    img = cv2.imread(IMAGE)[:, :, ::-1]  # BGR->RGB
    pil = F.to_pil_image(img)
    tensor = F.to_tensor(pil).to(device)

    with torch.no_grad():
        out = model([tensor])[0]

    vis = img[:, :, ::-1].copy()  # back to BGR for cv2
    H, W = vis.shape[:2]

    boxes = out["boxes"].cpu().numpy()
    scores = out["scores"].cpu().numpy()
    labels = out["labels"].cpu().numpy()
    masks = out.get("masks")
    if masks is not None:
        masks = masks.cpu().numpy()  # Nx1xHxW

    for i in range(len(scores)):
        if scores[i] < SCORE_THR:
            continue
        x1, y1, x2, y2 = boxes[i].astype(int)
        cls_id = int(labels[i])
        cls_name = DF2_CLASSES[cls_id - 1] if cls_id > 0 and cls_id <= len(DF2_CLASSES) else "unknown"

        color = (0, 200, 0)
        cv2.rectangle(vis, (x1, y1), (x2, y2), color, 2)
        cv2.putText(vis, f"{cls_name}:{scores[i]:.2f}", (x1, max(0, y1 - 5)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)

        if masks is not None:
            m = (masks[i, 0] > 0.5).astype("uint8")
            m = cv2.resize(m, (W, H), interpolation=cv2.INTER_NEAREST)  # safety
            colored = (np.stack([m * 0, m * 255, m * 0], axis=-1)).astype("uint8")
            vis = cv2.addWeighted(vis, 1.0, colored, 0.3, 0)

    cv2.imwrite(OUT, vis)
    print(f"Saved visualization: {OUT}")

if __name__ == "__main__":
    import numpy as np
    main()